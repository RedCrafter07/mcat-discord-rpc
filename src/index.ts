import { app, BrowserWindow, Tray, Menu, nativeImage } from 'electron';
import * as path from 'path';
import server from './lib/server';

server();

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
	// eslint-disable-line global-require
	app.quit();
}

let tray: Tray | null;

let mainWindow: BrowserWindow | null = null;
let mcatWindow: BrowserWindow | null = null;

const createMcat = (): void => {
	// Create the browser window.
	if (mcatWindow) {
		mcatWindow.show();
		return;
	}

	mcatWindow = new BrowserWindow({
		height: 600,
		width: 800,
		darkTheme: true,
		backgroundColor: '#000000',
	});

	mcatWindow.on('close', () => {
		mcatWindow = null;
	});

	mcatWindow.maximize();

	mcatWindow.setMenu(null);

	mcatWindow.setIcon(path.join(__dirname, '../../mcat.ico'));

	// and load the index.html of the app.
	mcatWindow.loadURL('https://player.monstercat.app');
};

const createWindow = (): void => {
	// Create the browser window.
	if (mainWindow) {
		mainWindow.show();
		return;
	}

	mainWindow = new BrowserWindow({
		height: 600,
		width: 800,
		darkTheme: true,
		backgroundColor: '#000000',
		webPreferences: {
			webSecurity: false,
		},
	});

	// mainWindow.setMenu(null);

	mainWindow.on('close', () => {
		mainWindow = null;
	});

	mainWindow.setIcon(path.join(__dirname, '../../mcat.ico'));

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

app.whenReady().then(() => {
	createWindow();
	runTray();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', (e: any) => {
	e.preventDefault();
});

app.on('activate', () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

function runTray() {
	tray = new Tray(path.join(__dirname, '../../mcat.ico'));
	const contextMenu = Menu.buildFromTemplate([
		{ label: 'Mcat-Dc', type: 'normal', enabled: false },
		{
			label: 'Player',
			type: 'normal',
			click: () => {
				createMcat();
			},
		},
		{
			label: 'Quit',
			type: 'normal',
			click: () => {
				app.quit();
			},
		},
	]);

	tray.on('click', () => {
		createWindow();
	});

	tray.setContextMenu(contextMenu);
}
